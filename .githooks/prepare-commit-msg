#!/bin/sh

#Constants
RED='\033[0;31m'
WHITE='\033[0;37m'

CURRBRANCH="$(git branch --show-current)"
FILE=$1
FILE_CONTENT="$(cat $1)"
OUTPUT=""

GIT='git --git-dir='$PWD'/.git'

if [[ $2 == "merge" ]];
then
    if [[ $CURRBRANCH == "master" || $CURRBRANCH == "development" ]];
    then
        echo ""
        echo -e "\t${RED}Cannot merge into $CURRBRANCH"
        echo -e "\t${WHITE}First push the local branch to origin : git push -u origin HEAD"
        echo -e "\tFrom there open a pull request to merge into development and asign 1 devops and your scrum master"
        echo ""
        echo -e "\tTo exit the MERGING mode enter the commad : git reset --merge"
        echo ""
        
        git fetch origin
        git reset --hard origin/$CURRBRANCH

        exit 1
    
    elif [[ $CURRBRANCH == "nuget/integration" || $CURRBRANCH == "nuget/hospital" ]];
    then
        echo ""
        echo -e "\tYou merged into $CURRBRANCH"
        echo -e "\tWhen you push to the repo the $CURRBRANCH will be closed for some time"
        echo -e "\tso do not abuse this!"
        echo -e "\tPushing this branch will automatically generate a new version of the nuget"
        echo -e "\tfor the module that this branch represents"
        echo -e "\tSince it is possible somebody else already changed something while you were"
        echo -e "\tworking on your feature, check if there are new migrations you should apply!"
        echo ""
        LATESTGITTAG="$(git describe --tags)"
        echo -e "\tLast version : $LATESTGITTAG"
        echo ""
        echo -e "\tWe use <breaking>.<feature>.<bugfix>-beta notation"
		echo ""
		if [[ $CURRBRANCH == "nuget/integration" ]];
		then
			echo -e "\tUse 'git tag -a v<new-version>-beta' to add a new version"
			echo -e "\tExample: git tag v1.5.3-beta"
		else
			echo -e "\tUse 'git tag -a v<new-version>-snapshot' to add a new version"
			echo -e "\tExample: git tag v1.5.3-snapshot"
		fi
        echo ""

        exit 0
    fi
fi

if [[ $CURRBRANCH =~ "feature/" ]];
then
    OUTPUT="feat: $FILE_CONTENT"
elif [[ $CURRBRANCH =~ "bugfix/" ]];
then 
    OUTPUT="fix: $FILE_CONTENT"
elif [[ $CURRBRANCH == "nuget/integration" || $CURRBRANCH == "nuget/hospital" ]];
then
    echo ""
    
    echo -e "\t${RED}You are trying to commit to $CURRBRANCH!"
    echo -e "\t${WHITE}You cannot commit to this branch but you can merge into it!"
    echo -e "\tThe agreed flow is that you rebase your feature branch onto this branch"
    echo -e "\tThen solve the conflicts there."
    echo -e "\tAnd then merge back into this branch"
    echo ""

    exit 1
elif [[ $CURRBRANCH == "" ]];
then
    echo ""
else
    echo ""
    echo -e "\t${RED}The branch isn't named correctly!"
    echo -e "\t${WHITE}If you are working on a feature the branch should be named : feature/some-task"
    echo -e "\tIf you are working on a bugfix the branch should be named : bugfix/some-task"
    echo ""
    echo -e "\tTo rename a current branch : git branch -m <newname>"
    echo ""

    exit 1
fi

echo $OUTPUT > $1

exit 0
